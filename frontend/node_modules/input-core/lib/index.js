"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var defineMaskList_1 = require("./functions/defineMaskList");
var inputValue_1 = require("./functions/inputValue");
var removeSelectedRange_1 = require("./functions/removeSelectedRange");
var CharTypesEnum_1 = require("./constants/CharTypesEnum");
exports.defaults = {
    maskFormat: [
        {
            str: '0',
            regexp: /[0-9]/,
        },
        {
            str: '*',
            regexp: /./,
        },
        {
            str: 'a',
            regexp: /[a-zA-Z]/,
        },
    ],
    maskChar: '',
    showMask: false,
    removeSelectedRange: removeSelectedRange_1.default,
};
exports.createInput = function (params) {
    var maskString = params.maskString, reformat = params.reformat, _a = params.maskFormat, maskFormat = _a === void 0 ? exports.defaults.maskFormat : _a, _b = params.maskChar, maskChar = _b === void 0 ? exports.defaults.maskChar : _b;
    if (!reformat && !params.mask) {
        reformat = function (params) {
            var str = params.value.map(function (item) { return item.char; }).join('');
            return {
                value: params.value,
                visibleValue: str,
                maskedValue: str,
                selection: params.selection,
            };
        };
    }
    else if (reformat) {
        params.mask = null;
    }
    if (maskString && maskString.length !== params.mask.length) {
        throw new Error('maskString must have same length as mask');
    }
    if (maskChar.length > 1) {
        throw new Error('maskChar must have only 1 char');
    }
    var maskFormatMap;
    var selection = { start: 0, end: 0 };
    var value;
    var maskedValue;
    var visibleValue;
    var mask;
    var callbacks = [];
    var interfaceMethods = {
        subscribe: function (callback) {
            callbacks.push(callback);
        },
        unsubscribe: function (callback) {
            callbacks = callbacks.filter(function (item) { return item !== callback; });
        },
        setMaskFormat: function (maskFormat) {
            maskFormatMap = maskFormat.reduce(function (store, item) {
                store[item.str] = item;
                return store;
            }, {});
        },
        setValue: function (data) {
            var result;
            if (reformat) {
                result = reformat({
                    value: data,
                    selection: selection,
                });
            }
            else {
                var dataList = void 0;
                if (Array.isArray(data)) {
                    dataList = data;
                }
                else {
                    dataList = [];
                    for (var i = 0; i < data.length; i++) {
                        dataList.push({ char: data[i], type: CharTypesEnum_1.CharTypes.USER });
                    }
                }
                result = inputValue_1.default({ data: dataList, selection: selection, mask: mask, maskChar: maskChar, maskString: maskString });
            }
            applyChanges(result);
        },
        setSelection: function (newSelection) {
            selection = newSelection;
        },
        getSelection: function () {
            return {
                start: selection.start,
                end: selection.end,
            };
        },
        backspace: function () {
            interfaceMethods.removePreviosOrSelected();
        },
        removePreviosOrSelected: function () {
            if (selection.start === selection.end) {
                selection.start = selection.end - 1;
                if (selection.start < 0) {
                    selection.start = 0;
                }
            }
            interfaceMethods.input('');
        },
        removeNextOrSelected: function () {
            if (selection.start === selection.end) {
                selection.end++;
            }
            interfaceMethods.input('');
        },
        getState: function () {
            return {
                value: value,
                maskedValue: maskedValue,
                visibleValue: visibleValue,
                selection: selection,
            };
        },
        setMask: function (newMask) {
            mask = defineMaskList_1.default(newMask, maskFormatMap);
            interfaceMethods.setValue(value);
        },
        setMaskChar: function (newMaskChar) {
            if (maskChar.length > 1) {
                throw new Error('maskChar must have only 1 char');
            }
            maskChar = newMaskChar;
            interfaceMethods.setValue(value);
        },
        setMaskString: function (newMaskString) {
            if (newMaskString && newMaskString.length !== mask.length) {
                throw new Error('maskString must have the same length as mask');
            }
            maskString = newMaskString;
            interfaceMethods.setValue(value);
        },
        setReformat: function (newReformat) {
            reformat = newReformat;
            interfaceMethods.setValue(value);
        },
        paste: function (value) {
            interfaceMethods.input(value);
        },
        input: function (input) {
            var result;
            if (reformat) {
                result = reformat({ value: value, input: input, selection: selection });
            }
            else {
                var tmpValue = removeSelectedRange_1.default({ value: value, selection: selection, maskChar: maskChar, maskString: maskString });
                selection.end = selection.start;
                result = inputValue_1.default({ data: tmpValue, input: input, selection: selection, mask: mask, maskChar: maskChar, maskString: maskString });
            }
            applyChanges(result);
        },
    };
    function applyChanges(result) {
        var oldMaskedValue = maskedValue;
        var oldVisibleValue = visibleValue;
        var oldSelection = selection;
        value = result.value;
        maskedValue = result.maskedValue;
        visibleValue = result.visibleValue;
        interfaceMethods.setSelection(result.selection);
        if (oldMaskedValue !== maskedValue ||
            oldVisibleValue !== visibleValue ||
            oldSelection.start !== selection.start ||
            oldSelection.end !== selection.end) {
            notify();
        }
    }
    function notify() {
        var state = interfaceMethods.getState();
        callbacks.forEach(function (callback) {
            callback(state);
        });
    }
    interfaceMethods.setMaskFormat(maskFormat);
    mask = defineMaskList_1.default(params.mask, maskFormatMap);
    interfaceMethods.setValue(params.value);
    return interfaceMethods;
};

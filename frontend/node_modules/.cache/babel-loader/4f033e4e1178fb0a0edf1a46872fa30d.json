{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n *\n * @param {String} mask\n * @param format\n * @returns {Array}\n */\n\nfunction defineMaskList(mask, format) {\n  if (!mask) {\n    return [];\n  }\n\n  var stack = []; // flag if escape char is used\n\n  var escape = false;\n  mask.split('').forEach(function (maskChar) {\n    var item = format[maskChar]; // if the previous char was escape char, we should ignore next format rule, and process mask char as a regular char.\n\n    if (escape && item) {\n      item = null;\n      escape = false;\n    }\n\n    if (!item) {\n      // escape char\n      if (!escape && maskChar === '\\\\') {\n        escape = true;\n        return;\n      }\n\n      escape = false;\n      stack.push({\n        char: maskChar\n      });\n      return;\n    }\n\n    if (item.regexp) {\n      stack.push(item);\n    }\n  });\n  return stack;\n}\n\nexports.default = defineMaskList;","map":{"version":3,"sources":["C:/Andrey/Desafio/frontEnd/node_modules/input-core/lib/functions/defineMaskList.js"],"names":["Object","defineProperty","exports","value","defineMaskList","mask","format","stack","escape","split","forEach","maskChar","item","push","char","regexp","default"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;;;;;;;AAMA,SAASC,cAAT,CAAwBC,IAAxB,EAA8BC,MAA9B,EAAsC;AAClC,MAAI,CAACD,IAAL,EAAW;AACP,WAAO,EAAP;AACH;;AACD,MAAIE,KAAK,GAAG,EAAZ,CAJkC,CAKlC;;AACA,MAAIC,MAAM,GAAG,KAAb;AACAH,EAAAA,IAAI,CAACI,KAAL,CAAW,EAAX,EAAeC,OAAf,CAAuB,UAAUC,QAAV,EAAoB;AACvC,QAAIC,IAAI,GAAGN,MAAM,CAACK,QAAD,CAAjB,CADuC,CAEvC;;AACA,QAAIH,MAAM,IAAII,IAAd,EAAoB;AAChBA,MAAAA,IAAI,GAAG,IAAP;AACAJ,MAAAA,MAAM,GAAG,KAAT;AACH;;AACD,QAAI,CAACI,IAAL,EAAW;AACP;AACA,UAAI,CAACJ,MAAD,IAAWG,QAAQ,KAAK,IAA5B,EAAkC;AAC9BH,QAAAA,MAAM,GAAG,IAAT;AACA;AACH;;AACDA,MAAAA,MAAM,GAAG,KAAT;AACAD,MAAAA,KAAK,CAACM,IAAN,CAAW;AACPC,QAAAA,IAAI,EAAEH;AADC,OAAX;AAGA;AACH;;AACD,QAAIC,IAAI,CAACG,MAAT,EAAiB;AACbR,MAAAA,KAAK,CAACM,IAAN,CAAWD,IAAX;AACH;AACJ,GAtBD;AAuBA,SAAOL,KAAP;AACH;;AACDL,OAAO,CAACc,OAAR,GAAkBZ,cAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n *\n * @param {String} mask\n * @param format\n * @returns {Array}\n */\nfunction defineMaskList(mask, format) {\n    if (!mask) {\n        return [];\n    }\n    var stack = [];\n    // flag if escape char is used\n    var escape = false;\n    mask.split('').forEach(function (maskChar) {\n        var item = format[maskChar];\n        // if the previous char was escape char, we should ignore next format rule, and process mask char as a regular char.\n        if (escape && item) {\n            item = null;\n            escape = false;\n        }\n        if (!item) {\n            // escape char\n            if (!escape && maskChar === '\\\\') {\n                escape = true;\n                return;\n            }\n            escape = false;\n            stack.push({\n                char: maskChar,\n            });\n            return;\n        }\n        if (item.regexp) {\n            stack.push(item);\n        }\n    });\n    return stack;\n}\nexports.default = defineMaskList;\n"]},"metadata":{},"sourceType":"script"}
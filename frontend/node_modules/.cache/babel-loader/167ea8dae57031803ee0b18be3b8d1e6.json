{"ast":null,"code":"import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nObject.assign = Object.assign || function (target) {\n  var arguments$1 = arguments;\n\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments$1[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction mask(value, precision, decimalSeparator, thousandSeparator, allowNegative, prefix, suffix) {\n  if (precision === void 0) precision = 2;\n  if (decimalSeparator === void 0) decimalSeparator = '.';\n  if (thousandSeparator === void 0) thousandSeparator = ',';\n  if (allowNegative === void 0) allowNegative = false;\n  if (prefix === void 0) prefix = '';\n  if (suffix === void 0) suffix = ''; // provide some default values and arg validation.\n\n  if (precision < 0) {\n    precision = 0;\n  } // precision cannot be negative\n\n\n  if (precision > 20) {\n    precision = 20;\n  } // precision cannot be greater than 20\n\n\n  if (value === null || value === undefined) {\n    return {\n      value: 0,\n      maskedValue: ''\n    };\n  }\n\n  value = String(value); //if the given value is a Number, let's convert into String to manipulate that\n\n  if (value.length == 0) {\n    return {\n      value: 0,\n      maskedValue: ''\n    };\n  } // extract digits. if no digits, fill in a zero.\n\n\n  var digits = value.match(/\\d/g) || ['0'];\n  var numberIsNegative = false;\n\n  if (allowNegative) {\n    var negativeSignCount = (value.match(/-/g) || []).length; // number will be negative if we have an odd number of \"-\"\n    // ideally, we should only ever have 0, 1 or 2 (positive number, making a number negative\n    // and making a negative number positive, respectively)\n\n    numberIsNegative = negativeSignCount % 2 === 1; // if every digit in the array is '0', then the number should never be negative\n\n    var allDigitsAreZero = true;\n\n    for (var idx = 0; idx < digits.length; idx += 1) {\n      if (digits[idx] !== '0') {\n        allDigitsAreZero = false;\n        break;\n      }\n    }\n\n    if (allDigitsAreZero) {\n      numberIsNegative = false;\n    }\n  } // zero-pad a input\n\n\n  while (digits.length <= precision) {\n    digits.unshift('0');\n  }\n\n  if (precision > 0) {\n    // add the decimal separator\n    digits.splice(digits.length - precision, 0, \".\");\n  } // clean up extraneous digits like leading zeros.\n\n\n  digits = Number(digits.join('')).toFixed(precision).split('');\n  var raw = Number(digits.join(''));\n  var decimalpos = digits.length - precision - 1; // -1 needed to position the decimal separator before the digits.\n\n  if (precision > 0) {\n    // set the final decimal separator\n    digits[decimalpos] = decimalSeparator;\n  } else {\n    // when precision is 0, there is no decimal separator.\n    decimalpos = digits.length;\n  } // add in any thousand separators\n\n\n  for (var x = decimalpos - 3; x > 0; x = x - 3) {\n    digits.splice(x, 0, thousandSeparator);\n  } // if we have a prefix or suffix, add them in.\n\n\n  if (prefix.length > 0) {\n    digits.unshift(prefix);\n  }\n\n  if (suffix.length > 0) {\n    digits.push(suffix);\n  } // if the number is negative, insert a \"-\" to\n  // the front of the array and negate the raw value\n\n\n  if (allowNegative && numberIsNegative) {\n    digits.unshift('-');\n    raw = -raw;\n  }\n\n  return {\n    value: raw,\n    maskedValue: digits.join('').trim()\n  };\n} // IE* parseFloat polyfill\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat#Polyfill\n\n\nNumber.parseFloat = parseFloat;\n\nvar CurrencyInput = function (Component$$1) {\n  function CurrencyInput(props) {\n    Component$$1.call(this, props);\n    this.prepareProps = this.prepareProps.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleFocus = this.handleFocus.bind(this);\n    this.state = this.prepareProps(this.props);\n    this.inputSelectionStart = 1;\n    this.inputSelectionEnd = 1;\n  }\n\n  if (Component$$1) CurrencyInput.__proto__ = Component$$1;\n  CurrencyInput.prototype = Object.create(Component$$1 && Component$$1.prototype);\n  CurrencyInput.prototype.constructor = CurrencyInput;\n  /**\n   * Exposes the current masked value.\n   *\n   * @returns {String}\n   */\n\n  CurrencyInput.prototype.getMaskedValue = function getMaskedValue() {\n    return this.state.maskedValue;\n  };\n  /**\n   * General function used to cleanup and define the final props used for rendering\n   * @returns {{ maskedValue: {String}, value: {Number}, customProps: {Object} }}\n   */\n\n\n  CurrencyInput.prototype.prepareProps = function prepareProps(props) {\n    var customProps = Object.assign({}, props); // babeljs converts to Object.assign, then polyfills.\n\n    delete customProps.onChange;\n    delete customProps.onChangeEvent;\n    delete customProps.value;\n    delete customProps.decimalSeparator;\n    delete customProps.thousandSeparator;\n    delete customProps.precision;\n    delete customProps.inputType;\n    delete customProps.allowNegative;\n    delete customProps.allowEmpty;\n    delete customProps.prefix;\n    delete customProps.suffix;\n    delete customProps.selectAllOnFocus;\n    delete customProps.autoFocus;\n    var initialValue = props.value;\n\n    if (initialValue === null) {\n      initialValue = props.allowEmpty ? null : '';\n    } else {\n      if (typeof initialValue == 'string') {\n        // Some people, when confronted with a problem, think \"I know, I'll use regular expressions.\"\n        // Now they have two problems.\n        // Strip out thousand separators, prefix, and suffix, etc.\n        if (props.thousandSeparator === \".\") {\n          // special handle the . thousand separator\n          initialValue = initialValue.replace(/\\./g, '');\n        }\n\n        if (props.decimalSeparator != \".\") {\n          // fix the decimal separator\n          initialValue = initialValue.replace(new RegExp(props.decimalSeparator, 'g'), '.');\n        } //Strip out anything that is not a digit, -, or decimal separator\n\n\n        initialValue = initialValue.replace(/[^0-9-.]/g, ''); // now we can parse.\n\n        initialValue = Number.parseFloat(initialValue);\n      }\n\n      initialValue = Number(initialValue).toLocaleString(undefined, {\n        style: 'decimal',\n        minimumFractionDigits: props.precision,\n        maximumFractionDigits: props.precision\n      });\n    }\n\n    var ref = mask(initialValue, props.precision, props.decimalSeparator, props.thousandSeparator, props.allowNegative, props.prefix, props.suffix);\n    var maskedValue = ref.maskedValue;\n    var value = ref.value;\n    return {\n      maskedValue: maskedValue,\n      value: value,\n      customProps: customProps\n    };\n  };\n  /**\n   * Component lifecycle function.\n   * Invoked when a component is receiving new props. This method is not called for the initial render.\n   *\n   * @param nextProps\n   * @see https://facebook.github.io/react/docs/component-specs.html#updating-componentwillreceiveprops\n   */\n\n\n  CurrencyInput.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n    this.setState(this.prepareProps(nextProps));\n  };\n  /**\n   * Component lifecycle function.\n   * @returns {XML}\n   * @see https://facebook.github.io/react/docs/react-component.html#componentdidmount\n   */\n\n\n  CurrencyInput.prototype.componentDidMount = function componentDidMount() {\n    var node = ReactDOM.findDOMNode(this.theInput);\n    var selectionStart, selectionEnd;\n\n    if (this.props.autoFocus) {\n      this.theInput.focus();\n      selectionEnd = this.state.maskedValue.length - this.props.suffix.length;\n      selectionStart = selectionEnd;\n    } else {\n      selectionEnd = Math.min(node.selectionEnd, this.theInput.value.length - this.props.suffix.length);\n      selectionStart = Math.min(node.selectionStart, selectionEnd);\n    }\n\n    node.setSelectionRange(selectionStart, selectionEnd);\n  };\n  /**\n   * Component lifecycle function\n   * @returns {XML}\n   * @see https://facebook.github.io/react/docs/react-component.html#componentwillupdate\n   */\n\n\n  CurrencyInput.prototype.componentWillUpdate = function componentWillUpdate() {\n    var node = ReactDOM.findDOMNode(this.theInput);\n    this.inputSelectionStart = node.selectionStart;\n    this.inputSelectionEnd = node.selectionEnd;\n  };\n  /**\n   * Component lifecycle function.\n   * @returns {XML}\n   * @see https://facebook.github.io/react/docs/react-component.html#componentdidupdate\n   */\n\n\n  CurrencyInput.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    var ref = this.props;\n    var decimalSeparator = ref.decimalSeparator;\n    var node = ReactDOM.findDOMNode(this.theInput);\n    var isNegative = (this.theInput.value.match(/-/g) || []).length % 2 === 1;\n    var minPos = this.props.prefix.length + (isNegative ? 1 : 0);\n    var selectionEnd = Math.max(minPos, Math.min(this.inputSelectionEnd, this.theInput.value.length - this.props.suffix.length));\n    var selectionStart = Math.max(minPos, Math.min(this.inputSelectionEnd, selectionEnd));\n    var regexEscapeRegex = /[-[\\]{}()*+?.,\\\\^$|#\\s]/g;\n    var separatorsRegex = new RegExp(decimalSeparator.replace(regexEscapeRegex, '\\\\$&') + '|' + this.props.thousandSeparator.replace(regexEscapeRegex, '\\\\$&'), 'g');\n    var currSeparatorCount = (this.state.maskedValue.match(separatorsRegex) || []).length;\n    var prevSeparatorCount = (prevState.maskedValue.match(separatorsRegex) || []).length;\n    var adjustment = Math.max(currSeparatorCount - prevSeparatorCount, 0);\n    selectionEnd = selectionEnd + adjustment;\n    selectionStart = selectionStart + adjustment;\n    var precision = Number(this.props.precision);\n    var baselength = this.props.suffix.length + this.props.prefix.length + (precision > 0 ? decimalSeparator.length : 0) // if precision is 0 there will be no decimal part\n    + precision + 1; // This is to account for the default '0' value that comes before the decimal separator\n\n    if (this.state.maskedValue.length == baselength) {\n      // if we are already at base length, position the cursor at the end.\n      selectionEnd = this.theInput.value.length - this.props.suffix.length;\n      selectionStart = selectionEnd;\n    }\n\n    node.setSelectionRange(selectionStart, selectionEnd);\n    this.inputSelectionStart = selectionStart;\n    this.inputSelectionEnd = selectionEnd;\n  };\n  /**\n   * onChange Event Handler\n   * @param event\n   */\n\n\n  CurrencyInput.prototype.handleChange = function handleChange(event) {\n    var this$1 = this;\n    event.preventDefault();\n    var ref = mask(event.target.value, this.props.precision, this.props.decimalSeparator, this.props.thousandSeparator, this.props.allowNegative, this.props.prefix, this.props.suffix);\n    var maskedValue = ref.maskedValue;\n    var value = ref.value;\n    event.persist(); // fixes issue #23\n\n    this.setState({\n      maskedValue: maskedValue,\n      value: value\n    }, function () {\n      this$1.props.onChange(maskedValue, value, event);\n      this$1.props.onChangeEvent(event, maskedValue, value);\n    });\n  };\n  /**\n   * onFocus Event Handler\n   * @param event\n   */\n\n\n  CurrencyInput.prototype.handleFocus = function handleFocus(event) {\n    if (!this.theInput) {\n      return;\n    } //Whenever we receive focus check to see if the position is before the suffix, if not, move it.\n\n\n    var selectionEnd = this.theInput.value.length - this.props.suffix.length;\n    var isNegative = (this.theInput.value.match(/-/g) || []).length % 2 === 1;\n    var selectionStart = this.props.prefix.length + (isNegative ? 1 : 0);\n    this.props.selectAllOnFocus && event.target.setSelectionRange(selectionStart, selectionEnd);\n    this.inputSelectionStart = selectionStart;\n    this.inputSelectionEnd = selectionEnd;\n  };\n\n  CurrencyInput.prototype.handleBlur = function handleBlur(event) {\n    this.inputSelectionStart = 0;\n    this.inputSelectionEnd = 0;\n  };\n  /**\n   * Component lifecycle function.\n   * @returns {XML}\n   * @see https://facebook.github.io/react/docs/component-specs.html#render\n   */\n\n\n  CurrencyInput.prototype.render = function render() {\n    var this$1 = this;\n    return React.createElement('input', Object.assign({}, {\n      ref: function (input) {\n        this$1.theInput = input;\n      },\n      type: this.props.inputType,\n      value: this.state.maskedValue,\n      onChange: this.handleChange,\n      onFocus: this.handleFocus,\n      onMouseUp: this.handleFocus\n    }, this.state.customProps));\n  };\n\n  return CurrencyInput;\n}(Component);\n/**\n * Prop validation.\n * @see https://facebook.github.io/react/docs/component-specs.html#proptypes\n */\n\n\nCurrencyInput.propTypes = {\n  onChange: PropTypes.func,\n  value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  decimalSeparator: PropTypes.string,\n  thousandSeparator: PropTypes.string,\n  precision: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  inputType: PropTypes.string,\n  allowNegative: PropTypes.bool,\n  allowEmpty: PropTypes.bool,\n  prefix: PropTypes.string,\n  suffix: PropTypes.string,\n  selectAllOnFocus: PropTypes.bool\n};\nCurrencyInput.defaultProps = {\n  onChange: function (maskValue, value, event) {\n    /*no-op*/\n  },\n  onChangeEvent: function (event, maskValue, value) {\n    /*no-op*/\n  },\n  autoFocus: false,\n  value: '0',\n  decimalSeparator: '.',\n  thousandSeparator: ',',\n  precision: '2',\n  inputType: 'text',\n  allowNegative: false,\n  prefix: '',\n  suffix: '',\n  selectAllOnFocus: false\n};\nexport default CurrencyInput;","map":{"version":3,"sources":["../src/object-assign-polyfill.js","../src/mask.js","../src/index.js"],"names":["arguments","let","super","const","this"],"mappings":"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","sourcesContent":["Object.assign = Object.assign ||\n  function(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n","\nexport default function mask(value, precision = 2, decimalSeparator = '.', thousandSeparator = ',', allowNegative = false, prefix = '', suffix = ''){\n    // provide some default values and arg validation.\n    if (precision < 0) { precision = 0; } // precision cannot be negative\n    if (precision > 20) { precision = 20; } // precision cannot be greater than 20\n    \n    if (value === null || value===undefined) {\n          return {\n              value: 0,\n              maskedValue: ''\n          };\n     }\n  \n    value = String(value); //if the given value is a Number, let's convert into String to manipulate that\n\n    if (value.length == 0) {\n        return {\n            value: 0,\n            maskedValue: ''\n        };\n    }\n\n\n    // extract digits. if no digits, fill in a zero.\n    let digits = value.match(/\\d/g) || ['0'];\n    \n    let numberIsNegative = false;\n    if (allowNegative) {\n        let negativeSignCount = (value.match(/-/g) || []).length;\n        // number will be negative if we have an odd number of \"-\"\n        // ideally, we should only ever have 0, 1 or 2 (positive number, making a number negative\n        // and making a negative number positive, respectively)\n        numberIsNegative = negativeSignCount % 2 === 1;\n        \n        // if every digit in the array is '0', then the number should never be negative\n        let allDigitsAreZero = true;\n        for (let idx=0; idx < digits.length; idx += 1) {\n            if(digits[idx] !== '0') {\n                allDigitsAreZero = false;\n                break;\n            }\n        }\n        if (allDigitsAreZero) {\n            numberIsNegative = false;\n        }\n    }\n\n    // zero-pad a input\n    while (digits.length <= precision) { digits.unshift('0'); }\n\n    if (precision > 0) {\n        // add the decimal separator\n        digits.splice(digits.length - precision, 0, \".\");\n    }\n\n    // clean up extraneous digits like leading zeros.\n    digits = Number(digits.join('')).toFixed(precision).split('');\n    let raw = Number(digits.join(''));\n\n    let decimalpos = digits.length - precision - 1;  // -1 needed to position the decimal separator before the digits.\n    if (precision > 0) {\n        // set the final decimal separator\n        digits[decimalpos] = decimalSeparator;\n    } else {\n        // when precision is 0, there is no decimal separator.\n        decimalpos = digits.length;\n    }\n\n    // add in any thousand separators\n    for (let x=decimalpos - 3; x > 0; x = x - 3) {\n        digits.splice(x, 0, thousandSeparator);\n    }\n\n    // if we have a prefix or suffix, add them in.\n    if (prefix.length > 0) { digits.unshift(prefix); }\n    if (suffix.length > 0) { digits.push(suffix); }\n\n    // if the number is negative, insert a \"-\" to\n    // the front of the array and negate the raw value\n    if (allowNegative && numberIsNegative) {\n        digits.unshift('-');\n        raw = -raw;\n    }\n\n    return {\n        value: raw,\n        maskedValue: digits.join('').trim()\n    };\n}\n","import './object-assign-polyfill';\n\nimport PropTypes from 'prop-types';\nimport React, { Component }  from 'react'\nimport ReactDOM from 'react-dom'\nimport mask from './mask.js'\n\n// IE* parseFloat polyfill\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat#Polyfill\nNumber.parseFloat = parseFloat;\n\nclass CurrencyInput extends Component {\n    constructor(props) {\n        super(props);\n        this.prepareProps = this.prepareProps.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleFocus = this.handleFocus.bind(this);\n        this.state = this.prepareProps(this.props);\n\n        this.inputSelectionStart = 1;\n        this.inputSelectionEnd = 1;\n    }\n\n\n    /**\n     * Exposes the current masked value.\n     *\n     * @returns {String}\n     */\n    getMaskedValue() {\n        return this.state.maskedValue;\n    }\n\n\n    /**\n     * General function used to cleanup and define the final props used for rendering\n     * @returns {{ maskedValue: {String}, value: {Number}, customProps: {Object} }}\n     */\n    prepareProps(props) {\n        let customProps = {...props}; // babeljs converts to Object.assign, then polyfills.\n        delete customProps.onChange;\n        delete customProps.onChangeEvent;\n        delete customProps.value;\n        delete customProps.decimalSeparator;\n        delete customProps.thousandSeparator;\n        delete customProps.precision;\n        delete customProps.inputType;\n        delete customProps.allowNegative;\n        delete customProps.allowEmpty;\n        delete customProps.prefix;\n        delete customProps.suffix;\n        delete customProps.selectAllOnFocus;\n        delete customProps.autoFocus;\n\n        let initialValue = props.value;\n        if (initialValue === null) {\n            initialValue = props.allowEmpty? null : '';\n        }else{\n\n            if (typeof initialValue == 'string') {\n                // Some people, when confronted with a problem, think \"I know, I'll use regular expressions.\"\n                // Now they have two problems.\n\n                // Strip out thousand separators, prefix, and suffix, etc.\n                if (props.thousandSeparator === \".\"){\n                    // special handle the . thousand separator\n                    initialValue = initialValue.replace(/\\./g, '');\n                }\n\n                if (props.decimalSeparator != \".\"){\n                    // fix the decimal separator\n                    initialValue = initialValue.replace(new RegExp(props.decimalSeparator, 'g'), '.');\n                }\n\n                //Strip out anything that is not a digit, -, or decimal separator\n                initialValue = initialValue.replace(/[^0-9-.]/g, '');\n\n                // now we can parse.\n                initialValue = Number.parseFloat(initialValue);\n            }\n            initialValue = Number(initialValue).toLocaleString(undefined, {\n                style                : 'decimal',\n                minimumFractionDigits: props.precision,\n                maximumFractionDigits: props.precision\n            })\n\n        }\n\n        const { maskedValue, value } = mask(\n            initialValue,\n            props.precision,\n            props.decimalSeparator,\n            props.thousandSeparator,\n            props.allowNegative,\n            props.prefix,\n            props.suffix\n        );\n\n        return { maskedValue, value, customProps };\n    }\n\n\n    /**\n     * Component lifecycle function.\n     * Invoked when a component is receiving new props. This method is not called for the initial render.\n     *\n     * @param nextProps\n     * @see https://facebook.github.io/react/docs/component-specs.html#updating-componentwillreceiveprops\n     */\n    componentWillReceiveProps(nextProps) {\n        this.setState(this.prepareProps(nextProps));\n    }\n\n\n    /**\n     * Component lifecycle function.\n     * @returns {XML}\n     * @see https://facebook.github.io/react/docs/react-component.html#componentdidmount\n     */\n    componentDidMount(){\n        let node = ReactDOM.findDOMNode(this.theInput);\n        let selectionStart, selectionEnd;\n\n        if (this.props.autoFocus) {\n            this.theInput.focus();\n            selectionEnd = this.state.maskedValue.length - this.props.suffix.length;\n            selectionStart = selectionEnd;\n        } else {\n            selectionEnd = Math.min(node.selectionEnd, this.theInput.value.length - this.props.suffix.length);\n            selectionStart = Math.min(node.selectionStart, selectionEnd);\n        }\n\n        node.setSelectionRange(selectionStart, selectionEnd);\n    }\n\n\n    /**\n     * Component lifecycle function\n     * @returns {XML}\n     * @see https://facebook.github.io/react/docs/react-component.html#componentwillupdate\n     */\n    componentWillUpdate() {\n        let node = ReactDOM.findDOMNode(this.theInput);\n        this.inputSelectionStart = node.selectionStart;\n        this.inputSelectionEnd = node.selectionEnd;\n    }\n\n\n    /**\n     * Component lifecycle function.\n     * @returns {XML}\n     * @see https://facebook.github.io/react/docs/react-component.html#componentdidupdate\n     */\n    componentDidUpdate(prevProps, prevState){\n        const { decimalSeparator } = this.props;\n        let node = ReactDOM.findDOMNode(this.theInput);\n        let isNegative = (this.theInput.value.match(/-/g) || []).length % 2 === 1;\n        let minPos = this.props.prefix.length + (isNegative ? 1 : 0);\n        let selectionEnd = Math.max(minPos, Math.min(this.inputSelectionEnd, this.theInput.value.length - this.props.suffix.length));\n        let selectionStart = Math.max(minPos, Math.min(this.inputSelectionEnd, selectionEnd));\n\n        let regexEscapeRegex = /[-[\\]{}()*+?.,\\\\^$|#\\s]/g;\n        let separatorsRegex = new RegExp(decimalSeparator.replace(regexEscapeRegex, '\\\\$&') + '|' + this.props.thousandSeparator.replace(regexEscapeRegex, '\\\\$&'), 'g');\n        let currSeparatorCount = (this.state.maskedValue.match(separatorsRegex) || []).length;\n        let prevSeparatorCount = (prevState.maskedValue.match(separatorsRegex) || []).length;\n        let adjustment = Math.max(currSeparatorCount - prevSeparatorCount, 0);\n\n        selectionEnd = selectionEnd + adjustment;\n        selectionStart = selectionStart + adjustment;\n\n        const precision = Number(this.props.precision);\n\n        let baselength = this.props.suffix.length\n            + this.props.prefix.length\n            + (precision > 0 ? decimalSeparator.length : 0) // if precision is 0 there will be no decimal part\n            + precision\n            + 1; // This is to account for the default '0' value that comes before the decimal separator\n\n        if (this.state.maskedValue.length == baselength){\n            // if we are already at base length, position the cursor at the end.\n            selectionEnd = this.theInput.value.length - this.props.suffix.length;\n            selectionStart = selectionEnd;\n        }\n\n        node.setSelectionRange(selectionStart, selectionEnd);\n        this.inputSelectionStart = selectionStart;\n        this.inputSelectionEnd = selectionEnd;\n    }\n\n\n    /**\n     * onChange Event Handler\n     * @param event\n     */\n    handleChange(event) {\n        event.preventDefault();\n        let { maskedValue, value } = mask(\n            event.target.value,\n            this.props.precision,\n            this.props.decimalSeparator,\n            this.props.thousandSeparator,\n            this.props.allowNegative,\n            this.props.prefix,\n            this.props.suffix\n        );\n\n        event.persist();  // fixes issue #23\n\n        this.setState({ maskedValue, value }, () => {\n            this.props.onChange(maskedValue, value, event);\n            this.props.onChangeEvent(event, maskedValue, value);\n        });\n    }\n\n\n    /**\n     * onFocus Event Handler\n     * @param event\n     */\n    handleFocus(event) {\n        if (!this.theInput) return;\n\n        //Whenever we receive focus check to see if the position is before the suffix, if not, move it.\n        let selectionEnd = this.theInput.value.length - this.props.suffix.length;\n        let isNegative = (this.theInput.value.match(/-/g) || []).length % 2 === 1;\n        let selectionStart = this.props.prefix.length + (isNegative ? 1 : 0);\n        this.props.selectAllOnFocus && event.target.setSelectionRange(selectionStart, selectionEnd);\n        this.inputSelectionStart = selectionStart;\n        this.inputSelectionEnd = selectionEnd;\n    }\n\n\n    handleBlur(event) {\n        this.inputSelectionStart = 0;\n        this.inputSelectionEnd = 0;\n    }\n\n\n    /**\n     * Component lifecycle function.\n     * @returns {XML}\n     * @see https://facebook.github.io/react/docs/component-specs.html#render\n     */\n    render() {\n        return (\n            <input\n                ref={(input) => { this.theInput = input; }}\n                type={this.props.inputType}\n                value={this.state.maskedValue}\n                onChange={this.handleChange}\n                onFocus={this.handleFocus}\n                onMouseUp={this.handleFocus}\n                {...this.state.customProps}\n            />\n        )\n    }\n}\n\n\n\n/**\n * Prop validation.\n * @see https://facebook.github.io/react/docs/component-specs.html#proptypes\n */\n\nCurrencyInput.propTypes = {\n    onChange: PropTypes.func,\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    decimalSeparator: PropTypes.string,\n    thousandSeparator: PropTypes.string,\n    precision: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    inputType: PropTypes.string,\n    allowNegative: PropTypes.bool,\n    allowEmpty: PropTypes.bool,\n    prefix: PropTypes.string,\n    suffix: PropTypes.string,\n    selectAllOnFocus: PropTypes.bool\n};\n\n\nCurrencyInput.defaultProps = {\n    onChange: function(maskValue, value, event) {/*no-op*/},\n    onChangeEvent: function(event, maskValue, value) {/*no-op*/},\n    autoFocus: false,\n    value: '0',\n    decimalSeparator: '.',\n    thousandSeparator: ',',\n    precision: '2',\n    inputType: 'text',\n    allowNegative: false,\n    prefix: '',\n    suffix: '',\n    selectAllOnFocus: false\n};\n\n\nexport default CurrencyInput\n"]},"metadata":{},"sourceType":"module"}